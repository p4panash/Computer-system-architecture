     1                                  ;Given the word A,obtain the doubleword B as follows:
     2                                  ;the bits 0-3 of B are the same as the bits 1-4 of the result A XOR 0Ah
     3                                  ;the bits 4-11 of B are the same as the bits 7-14 of A
     4                                  ;the bits 12-19 of B have the value 0
     5                                  ;the bits 20-25 of B have the value 1
     6                                  ;the bits 26-31 of C are the same as the bits 3-8 of A complemented
     7                                  
     8                                  bits 32 ; assembling for the 32 bits architecture
     9                                  
    10                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    11                                  global start        
    12                                  
    13                                  ; declare external functions needed by our program
    14                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    15                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    16                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20 00000000 751C                        a dw 0001110001110101b
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          
    26 00000000 BB00000000                      mov ebx, 0 ; we compute the result in bx
    27                                          
    28 00000005 66BB0000                        mov bx, 0
    29 00000009 66B8F003                        mov ax, 0000001111110000b ;first 3 digits are 0
    30 0000000D 6609C3                          or bx, ax ; the bits 20-25 have the value 1
    31                                          
    32 00000010 66A1[00000000]                  mov ax, [a]
    33 00000016 66F7D0                          not ax ; complementing a
    34 00000019 6625F801                        and ax, 0000000111111000b ; isolating the bits 3-8 of A
    35 0000001D B107                            mov cl, 7
    36 0000001F 66D3C0                          rol ax, cl ; rotate ax 7 position to left
    37 00000022 6609C3                          or bx, ax ; we put the bits into the result
    38                                          
    39 00000025 B110                            mov cl, 16 
    40 00000027 D3C3                            rol ebx, cl ;moving the result into the first half of eax
    41                                          
    42 00000029 66A1[00000000]                  mov ax, [a]
    43 0000002F 6683F00A                        xor ax, 0Ah ; apling xor 0A on A        
    44 00000033 6683E01E                        and ax, 0000000000011110b ; isolating 1-4 bits
    45 00000037 B101                            mov cl, 1
    46 00000039 66D3C8                          ror ax, cl
    47 0000003C 6609C3                          or bx, ax; moving the result in bx
    48                                          
    49 0000003F 66A1[00000000]                  mov ax, [a]
    50 00000045 6625803F                        and ax, 0011111110000000b ; isolating 7-14 bits
    51 00000049 B103                            mov cl, 3 
    52 0000004B 66D3C8                          ror ax, cl ; move then 3 position back
    53 0000004E 6609C3                          or bx, ax ; put result in bx
    54                                          
    55                                          ; exit(0)
    56 00000051 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000053 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
