     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 CF040809A519                array dw 1231, 2312, 6565
    14                                      len equ ($-array) / 2
    15 00000006 00<rept>                    s1 times len db 0
    16 00000009 00<rept>                    s2 times len db 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 BE[00000000]                    mov esi, array
    22 00000005 FC                              cld ;go through the array from left to right
    23 00000006 B903000000                      mov ecx, len
    24 0000000B BB00000000                      mov ebx, 0
    25                                          rpt:
    26 00000010 66AD                                lodsw
    27                                   
    28 00000012 53                                  push ebx ;keeping the counter on stack
    29 00000013 BB00000000                          mov ebx, 0 ;initializing ebx in order to count the number of apparitions for the 1 bit
    30 00000018 BA00000000                          mov edx, 0 ;initializing edx in order to count the number of apparitions for the 1 bit
    31                                              
    32 0000001D 51                                  push ecx ;keeping the number of remaining loops on stack
    33 0000001E B908000000                          mov ecx, 8 ;count_al will have 8 loops
    34                                              count_al:
    35 00000023 D0C0                                    rol al, 1
    36 00000025 7301                                    jnc next
    37 00000027 43                                      inc ebx
    38                                                  next:
    39 00000028 E2F9                                loop count_al
    40                                              
    41 0000002A B908000000                          mov ecx, 8 ;count_ah will have 8 loops
    42                                              count_ah:
    43 0000002F D0C4                                    rol ah, 1
    44 00000031 7301                                    jnc next2
    45 00000033 42                                      inc edx
    46                                                  next2:
    47 00000034 E2F9                                loop count_ah
    48                                              
    49 00000036 59                                  pop ecx
    50 00000037 39DA                                cmp edx, ebx ;comparing the number of bits 1
    51 00000039 7704                                ja greater
    52 0000003B 7411                                je equal
    53 0000003D 7222                                jb smaller
    54                                              
    55                                              greater:
    56 0000003F 5B                                      pop ebx
    57 00000040 88A3[06000000]                          mov [s1+ebx], ah
    58 00000046 8883[09000000]                          mov [s2+ebx], al
    59 0000004C EB22                                    jmp increment
    60                                              equal:
    61 0000004E 89DA                                    mov edx, ebx
    62 00000050 5B                                      pop ebx
    63 00000051 8893[06000000]                          mov [s1+ebx], dl
    64 00000057 B200                                    mov dl, 0
    65 00000059 8893[09000000]                          mov [s2+ebx], dl
    66 0000005F EB0F                                    jmp increment
    67                                              smaller:
    68 00000061 5B                                      pop ebx
    69 00000062 8883[06000000]                          mov [s1+ebx], al
    70 00000068 88A3[09000000]                          mov [s2+ebx], ah
    71 0000006E EB00                                    jmp increment
    72                                              increment:
    73 00000070 83C301                                  add ebx, 1
    74 00000073 E29B                            loop rpt         
    75                                          ; exit(0)
    76 00000075 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000077 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
